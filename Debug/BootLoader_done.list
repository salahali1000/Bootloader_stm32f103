
BootLoader_done.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080022f4  080022f4  000122f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800232c  0800232c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800232c  0800232c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800232c  0800232c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800232c  0800232c  0001232c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002330  08002330  00012330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000010  08002340  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08002340  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008570  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001caf  00000000  00000000  000285a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000848  00000000  00000000  0002a258  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000770  00000000  00000000  0002aaa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017804  00000000  00000000  0002b210  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000864e  00000000  00000000  00042a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008301f  00000000  00000000  0004b062  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ce081  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f2c  00000000  00000000  000ce0fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080022dc 	.word	0x080022dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080022dc 	.word	0x080022dc

0800014c <CBL_GET_Version>:
	va_end(args);

}

static void CBL_GET_Version(uint8_t *Host_Buffer)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint8_t version[4]= {CBL_VENDOR_ID,CBL_SW_MAJOR_VERSION,CBL_SW_MINOR_VERSION,CBL_SW_PATCH_VERSION} ;
 8000154:	4b16      	ldr	r3, [pc, #88]	; (80001b0 <CBL_GET_Version+0x64>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	60fb      	str	r3, [r7, #12]
	uint16_t Host_Packet_Len = 0 ;
 800015a:	2300      	movs	r3, #0
 800015c:	82fb      	strh	r3, [r7, #22]
	uint32_t CRC_Value = 0;
 800015e:	2300      	movs	r3, #0
 8000160:	613b      	str	r3, [r7, #16]
	Host_Packet_Len = Host_Buffer[0] + 1 ;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	781b      	ldrb	r3, [r3, #0]
 8000166:	b29b      	uxth	r3, r3
 8000168:	3301      	adds	r3, #1
 800016a:	82fb      	strh	r3, [r7, #22]
	CRC_Value = *(uint32_t*)(Host_Buffer + Host_Packet_Len-4) ;
 800016c:	8afb      	ldrh	r3, [r7, #22]
 800016e:	3b04      	subs	r3, #4
 8000170:	687a      	ldr	r2, [r7, #4]
 8000172:	4413      	add	r3, r2
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	613b      	str	r3, [r7, #16]
	if(CRC_VERIFYING_PASS == BL_CRC_Verify((uint8_t*) &Host_Buffer[0], Host_Packet_Len-4, CRC_Value))
 8000178:	8afb      	ldrh	r3, [r7, #22]
 800017a:	3b04      	subs	r3, #4
 800017c:	693a      	ldr	r2, [r7, #16]
 800017e:	4619      	mov	r1, r3
 8000180:	6878      	ldr	r0, [r7, #4]
 8000182:	f000 fa39 	bl	80005f8 <BL_CRC_Verify>
 8000186:	4603      	mov	r3, r0
 8000188:	2b01      	cmp	r3, #1
 800018a:	d10b      	bne.n	80001a4 <CBL_GET_Version+0x58>
	{
		BL_Send_ACK(4) ;
 800018c:	2004      	movs	r0, #4
 800018e:	f000 fa07 	bl	80005a0 <BL_Send_ACK>
		HAL_UART_Transmit(&huart2,(uint8_t*)version,4,HAL_MAX_DELAY);
 8000192:	f107 010c 	add.w	r1, r7, #12
 8000196:	f04f 33ff 	mov.w	r3, #4294967295
 800019a:	2204      	movs	r2, #4
 800019c:	4805      	ldr	r0, [pc, #20]	; (80001b4 <CBL_GET_Version+0x68>)
 800019e:	f001 fe64 	bl	8001e6a <HAL_UART_Transmit>
	}
	else
	{
		BL_Send_NACK() ;
	}
}
 80001a2:	e001      	b.n	80001a8 <CBL_GET_Version+0x5c>
		BL_Send_NACK() ;
 80001a4:	f000 fa16 	bl	80005d4 <BL_Send_NACK>
}
 80001a8:	bf00      	nop
 80001aa:	3718      	adds	r7, #24
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	080022f4 	.word	0x080022f4
 80001b4:	20000140 	.word	0x20000140

080001b8 <CBL_GET_Help>:

static void CBL_GET_Help(uint8_t *Host_Buffer)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b086      	sub	sp, #24
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	uint8_t BL_Supported_CMS[6]=
 80001c0:	4a19      	ldr	r2, [pc, #100]	; (8000228 <CBL_GET_Help+0x70>)
 80001c2:	f107 0308 	add.w	r3, r7, #8
 80001c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001ca:	6018      	str	r0, [r3, #0]
 80001cc:	3304      	adds	r3, #4
 80001ce:	8019      	strh	r1, [r3, #0]
			CBL_GET_CID_CMD,
			CBL_GO_TO_ADDR_CMD,
			CBL_FLASH_ERASE_CMD,
			CBL_MEM_WRITE_CMD
	};
	uint16_t Host_Packet_Len = 0 ;
 80001d0:	2300      	movs	r3, #0
 80001d2:	82fb      	strh	r3, [r7, #22]
	uint32_t CRC_Value = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	613b      	str	r3, [r7, #16]
	Host_Packet_Len = Host_Buffer[0] + 1 ;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	b29b      	uxth	r3, r3
 80001de:	3301      	adds	r3, #1
 80001e0:	82fb      	strh	r3, [r7, #22]
	CRC_Value = *(uint32_t*)(Host_Buffer + Host_Packet_Len-4) ;
 80001e2:	8afb      	ldrh	r3, [r7, #22]
 80001e4:	3b04      	subs	r3, #4
 80001e6:	687a      	ldr	r2, [r7, #4]
 80001e8:	4413      	add	r3, r2
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	613b      	str	r3, [r7, #16]
	if(CRC_VERIFYING_PASS == BL_CRC_Verify((uint8_t*) &Host_Buffer[0], Host_Packet_Len-4, CRC_Value))
 80001ee:	8afb      	ldrh	r3, [r7, #22]
 80001f0:	3b04      	subs	r3, #4
 80001f2:	693a      	ldr	r2, [r7, #16]
 80001f4:	4619      	mov	r1, r3
 80001f6:	6878      	ldr	r0, [r7, #4]
 80001f8:	f000 f9fe 	bl	80005f8 <BL_CRC_Verify>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d10b      	bne.n	800021a <CBL_GET_Help+0x62>
	{
		BL_Send_ACK(6) ;
 8000202:	2006      	movs	r0, #6
 8000204:	f000 f9cc 	bl	80005a0 <BL_Send_ACK>
		HAL_UART_Transmit(&huart2,(uint8_t*)BL_Supported_CMS,6,HAL_MAX_DELAY);
 8000208:	f107 0108 	add.w	r1, r7, #8
 800020c:	f04f 33ff 	mov.w	r3, #4294967295
 8000210:	2206      	movs	r2, #6
 8000212:	4806      	ldr	r0, [pc, #24]	; (800022c <CBL_GET_Help+0x74>)
 8000214:	f001 fe29 	bl	8001e6a <HAL_UART_Transmit>
	}
	else
	{
		BL_Send_NACK() ;
	}
}
 8000218:	e001      	b.n	800021e <CBL_GET_Help+0x66>
		BL_Send_NACK() ;
 800021a:	f000 f9db 	bl	80005d4 <BL_Send_NACK>
}
 800021e:	bf00      	nop
 8000220:	3718      	adds	r7, #24
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	080022f8 	.word	0x080022f8
 800022c:	20000140 	.word	0x20000140

08000230 <CBL_GET_Chip_Identification_Number>:

static void CBL_GET_Chip_Identification_Number(uint8_t *Host_Buffer)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b086      	sub	sp, #24
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	uint16_t Chip_ID = 0 ;
 8000238:	2300      	movs	r3, #0
 800023a:	81fb      	strh	r3, [r7, #14]
	uint16_t Host_Packet_Len = 0 ;
 800023c:	2300      	movs	r3, #0
 800023e:	82fb      	strh	r3, [r7, #22]
	uint32_t CRC_Value = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	613b      	str	r3, [r7, #16]
	Host_Packet_Len = Host_Buffer[0] + 1 ;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	b29b      	uxth	r3, r3
 800024a:	3301      	adds	r3, #1
 800024c:	82fb      	strh	r3, [r7, #22]
	CRC_Value = *(uint32_t*)(Host_Buffer + Host_Packet_Len-4) ;
 800024e:	8afb      	ldrh	r3, [r7, #22]
 8000250:	3b04      	subs	r3, #4
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	4413      	add	r3, r2
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	613b      	str	r3, [r7, #16]
	if(CRC_VERIFYING_PASS == BL_CRC_Verify((uint8_t*) &Host_Buffer[0], Host_Packet_Len-4, CRC_Value))
 800025a:	8afb      	ldrh	r3, [r7, #22]
 800025c:	3b04      	subs	r3, #4
 800025e:	693a      	ldr	r2, [r7, #16]
 8000260:	4619      	mov	r1, r3
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	f000 f9c8 	bl	80005f8 <BL_CRC_Verify>
 8000268:	4603      	mov	r3, r0
 800026a:	2b01      	cmp	r3, #1
 800026c:	d112      	bne.n	8000294 <CBL_GET_Chip_Identification_Number+0x64>
	{
		Chip_ID = (uint16_t)(DBGMCU->IDCODE & 0x00000FFF) ;
 800026e:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <CBL_GET_Chip_Identification_Number+0x70>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	b29b      	uxth	r3, r3
 8000274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000278:	b29b      	uxth	r3, r3
 800027a:	81fb      	strh	r3, [r7, #14]
		BL_Send_ACK(2) ;
 800027c:	2002      	movs	r0, #2
 800027e:	f000 f98f 	bl	80005a0 <BL_Send_ACK>
		HAL_UART_Transmit(&huart2,(uint8_t*)&Chip_ID,2,HAL_MAX_DELAY);
 8000282:	f107 010e 	add.w	r1, r7, #14
 8000286:	f04f 33ff 	mov.w	r3, #4294967295
 800028a:	2202      	movs	r2, #2
 800028c:	4805      	ldr	r0, [pc, #20]	; (80002a4 <CBL_GET_Chip_Identification_Number+0x74>)
 800028e:	f001 fdec 	bl	8001e6a <HAL_UART_Transmit>
	}
	else
	{
		BL_Send_NACK() ;
	}
}
 8000292:	e001      	b.n	8000298 <CBL_GET_Chip_Identification_Number+0x68>
		BL_Send_NACK() ;
 8000294:	f000 f99e 	bl	80005d4 <BL_Send_NACK>
}
 8000298:	bf00      	nop
 800029a:	3718      	adds	r7, #24
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	e0042000 	.word	0xe0042000
 80002a4:	20000140 	.word	0x20000140

080002a8 <CBL_Flash_Erase>:

static void CBL_Flash_Erase(uint8_t *Host_Buffer)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	uint8_t Erase_Status = UNSUCCESSFUL_ERASE ;
 80002b0:	2302      	movs	r3, #2
 80002b2:	73fb      	strb	r3, [r7, #15]
	uint16_t Host_Packet_Len = 0 ;
 80002b4:	2300      	movs	r3, #0
 80002b6:	82fb      	strh	r3, [r7, #22]
	uint32_t CRC_Value = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	613b      	str	r3, [r7, #16]
	Host_Packet_Len = Host_Buffer[0] + 1 ;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	b29b      	uxth	r3, r3
 80002c2:	3301      	adds	r3, #1
 80002c4:	82fb      	strh	r3, [r7, #22]
	CRC_Value = *(uint32_t*)(Host_Buffer + Host_Packet_Len-4) ;
 80002c6:	8afb      	ldrh	r3, [r7, #22]
 80002c8:	3b04      	subs	r3, #4
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	4413      	add	r3, r2
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	613b      	str	r3, [r7, #16]
	if(CRC_VERIFYING_PASS == BL_CRC_Verify((uint8_t*) &Host_Buffer[0], Host_Packet_Len-4, CRC_Value))
 80002d2:	8afb      	ldrh	r3, [r7, #22]
 80002d4:	3b04      	subs	r3, #4
 80002d6:	693a      	ldr	r2, [r7, #16]
 80002d8:	4619      	mov	r1, r3
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f000 f98c 	bl	80005f8 <BL_CRC_Verify>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d117      	bne.n	8000316 <CBL_Flash_Erase+0x6e>
	{
		Erase_Status = Perform_Flash_Erase(*((uint32_t*)&Host_Buffer[2]),Host_Buffer[6]);
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	3302      	adds	r3, #2
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	3306      	adds	r3, #6
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	4619      	mov	r1, r3
 80002f4:	4610      	mov	r0, r2
 80002f6:	f000 f9bb 	bl	8000670 <Perform_Flash_Erase>
 80002fa:	4603      	mov	r3, r0
 80002fc:	73fb      	strb	r3, [r7, #15]
		BL_Send_ACK(1) ;
 80002fe:	2001      	movs	r0, #1
 8000300:	f000 f94e 	bl	80005a0 <BL_Send_ACK>
		HAL_UART_Transmit(&huart2,(uint8_t*)&Erase_Status,1,HAL_MAX_DELAY);
 8000304:	f107 010f 	add.w	r1, r7, #15
 8000308:	f04f 33ff 	mov.w	r3, #4294967295
 800030c:	2201      	movs	r2, #1
 800030e:	4805      	ldr	r0, [pc, #20]	; (8000324 <CBL_Flash_Erase+0x7c>)
 8000310:	f001 fdab 	bl	8001e6a <HAL_UART_Transmit>
	}
	else
	{
		BL_Send_NACK() ;
	}
}
 8000314:	e001      	b.n	800031a <CBL_Flash_Erase+0x72>
		BL_Send_NACK() ;
 8000316:	f000 f95d 	bl	80005d4 <BL_Send_NACK>
}
 800031a:	bf00      	nop
 800031c:	3718      	adds	r7, #24
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000140 	.word	0x20000140

08000328 <CBL_Write_Data>:


static void CBL_Write_Data(uint8_t *Host_Buffer)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verify = ADDRESS_IS_INVALID ;
 8000330:	2300      	movs	r3, #0
 8000332:	72fb      	strb	r3, [r7, #11]
	uint32_t Address_Host = 0 ;
 8000334:	2300      	movs	r3, #0
 8000336:	617b      	str	r3, [r7, #20]
	uint8_t Data_Length = 0 ;
 8000338:	2300      	movs	r3, #0
 800033a:	74fb      	strb	r3, [r7, #19]
	uint8_t Payload_Status = FLASH_PAYLOAD_WRITE_FAILED ;
 800033c:	2300      	movs	r3, #0
 800033e:	72bb      	strb	r3, [r7, #10]
	uint16_t Host_Packet_Len = 0 ;
 8000340:	2300      	movs	r3, #0
 8000342:	823b      	strh	r3, [r7, #16]
	uint32_t CRC_Value = 0;
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
	Host_Packet_Len = Host_Buffer[0] + 1 ;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	b29b      	uxth	r3, r3
 800034e:	3301      	adds	r3, #1
 8000350:	823b      	strh	r3, [r7, #16]
	CRC_Value = *(uint32_t*)(Host_Buffer + Host_Packet_Len-4) ;
 8000352:	8a3b      	ldrh	r3, [r7, #16]
 8000354:	3b04      	subs	r3, #4
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	4413      	add	r3, r2
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	60fb      	str	r3, [r7, #12]
	if(CRC_VERIFYING_PASS == BL_CRC_Verify((uint8_t*) &Host_Buffer[0], Host_Packet_Len-4, CRC_Value))
 800035e:	8a3b      	ldrh	r3, [r7, #16]
 8000360:	3b04      	subs	r3, #4
 8000362:	68fa      	ldr	r2, [r7, #12]
 8000364:	4619      	mov	r1, r3
 8000366:	6878      	ldr	r0, [r7, #4]
 8000368:	f000 f946 	bl	80005f8 <BL_CRC_Verify>
 800036c:	4603      	mov	r3, r0
 800036e:	2b01      	cmp	r3, #1
 8000370:	d12c      	bne.n	80003cc <CBL_Write_Data+0xa4>
	{
		BL_Send_ACK(1) ;
 8000372:	2001      	movs	r0, #1
 8000374:	f000 f914 	bl	80005a0 <BL_Send_ACK>
		Address_Host = *((uint32_t*)&Host_Buffer[2]) ;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800037e:	617b      	str	r3, [r7, #20]
		Data_Length = Host_Buffer[6] ;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	799b      	ldrb	r3, [r3, #6]
 8000384:	74fb      	strb	r3, [r7, #19]
		Address_Verify = BL_Address_Verification(Address_Host);
 8000386:	6978      	ldr	r0, [r7, #20]
 8000388:	f000 f828 	bl	80003dc <BL_Address_Verification>
 800038c:	4603      	mov	r3, r0
 800038e:	72fb      	strb	r3, [r7, #11]
		if(Address_Verify == ADDRESS_IS_VALID)
 8000390:	7afb      	ldrb	r3, [r7, #11]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d111      	bne.n	80003ba <CBL_Write_Data+0x92>
		{
			Payload_Status = FlashMemory_Write((uint16_t*)&Host_Buffer[7], Address_Host, Data_Length) ;
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	3307      	adds	r3, #7
 800039a:	7cfa      	ldrb	r2, [r7, #19]
 800039c:	6979      	ldr	r1, [r7, #20]
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f9b6 	bl	8000710 <FlashMemory_Write>
 80003a4:	4603      	mov	r3, r0
 80003a6:	72bb      	strb	r3, [r7, #10]
			HAL_UART_Transmit(&huart2,(uint8_t*)&Payload_Status,1,HAL_MAX_DELAY);
 80003a8:	f107 010a 	add.w	r1, r7, #10
 80003ac:	f04f 33ff 	mov.w	r3, #4294967295
 80003b0:	2201      	movs	r2, #1
 80003b2:	4809      	ldr	r0, [pc, #36]	; (80003d8 <CBL_Write_Data+0xb0>)
 80003b4:	f001 fd59 	bl	8001e6a <HAL_UART_Transmit>
	}
	else
	{
		BL_Send_NACK() ;
	}
}
 80003b8:	e00a      	b.n	80003d0 <CBL_Write_Data+0xa8>
			HAL_UART_Transmit(&huart2,(uint8_t*)&Address_Verify,1,HAL_MAX_DELAY);
 80003ba:	f107 010b 	add.w	r1, r7, #11
 80003be:	f04f 33ff 	mov.w	r3, #4294967295
 80003c2:	2201      	movs	r2, #1
 80003c4:	4804      	ldr	r0, [pc, #16]	; (80003d8 <CBL_Write_Data+0xb0>)
 80003c6:	f001 fd50 	bl	8001e6a <HAL_UART_Transmit>
}
 80003ca:	e001      	b.n	80003d0 <CBL_Write_Data+0xa8>
		BL_Send_NACK() ;
 80003cc:	f000 f902 	bl	80005d4 <BL_Send_NACK>
}
 80003d0:	bf00      	nop
 80003d2:	3718      	adds	r7, #24
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000140 	.word	0x20000140

080003dc <BL_Address_Verification>:

static uint8_t BL_Address_Verification(uint32_t Address)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verify = ADDRESS_IS_INVALID ;
 80003e4:	2300      	movs	r3, #0
 80003e6:	73fb      	strb	r3, [r7, #15]
	if(Address >= FLASH_BASE && Address<= STM32F103_FLASH_END)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80003ee:	d306      	bcc.n	80003fe <BL_Address_Verification+0x22>
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a0c      	ldr	r2, [pc, #48]	; (8000424 <BL_Address_Verification+0x48>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d802      	bhi.n	80003fe <BL_Address_Verification+0x22>
	{
		Address_Verify = ADDRESS_IS_VALID ;
 80003f8:	2301      	movs	r3, #1
 80003fa:	73fb      	strb	r3, [r7, #15]
 80003fc:	e00c      	b.n	8000418 <BL_Address_Verification+0x3c>
	}
	else if(Address >= SRAM_BASE && Address<= STM32F103_SRAM_END)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000404:	d306      	bcc.n	8000414 <BL_Address_Verification+0x38>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <BL_Address_Verification+0x4c>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d802      	bhi.n	8000414 <BL_Address_Verification+0x38>
	{
		Address_Verify = ADDRESS_IS_VALID ;
 800040e:	2301      	movs	r3, #1
 8000410:	73fb      	strb	r3, [r7, #15]
 8000412:	e001      	b.n	8000418 <BL_Address_Verification+0x3c>
	}
	else
	{
		Address_Verify = ADDRESS_IS_VALID ;
 8000414:	2301      	movs	r3, #1
 8000416:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verify ;
 8000418:	7bfb      	ldrb	r3, [r7, #15]
}
 800041a:	4618      	mov	r0, r3
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	08010000 	.word	0x08010000
 8000428:	20005000 	.word	0x20005000

0800042c <bootloader_jump_to_user_app>:


static void bootloader_jump_to_user_app(uint8_t *Host_buffer)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b08a      	sub	sp, #40	; 0x28
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	/* Extract Packet length Sent by the HOST */
	uint16_t Host_Packet_Len = Host_buffer[0]+1;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	b29b      	uxth	r3, r3
 800043a:	3301      	adds	r3, #1
 800043c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t CRC_Value = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	623b      	str	r3, [r7, #32]

	/* Extract CRC32 Sent by the HOST */
	CRC_Value = *(uint32_t*)(Host_Buffer + Host_Packet_Len-4) ;
 8000442:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000444:	3b04      	subs	r3, #4
 8000446:	4a1b      	ldr	r2, [pc, #108]	; (80004b4 <bootloader_jump_to_user_app+0x88>)
 8000448:	4413      	add	r3, r2
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	623b      	str	r3, [r7, #32]
	if(CRC_VERIFYING_PASS == BL_CRC_Verify((uint8_t*) &Host_Buffer[0], Host_Packet_Len-4, CRC_Value))
 800044e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000450:	3b04      	subs	r3, #4
 8000452:	6a3a      	ldr	r2, [r7, #32]
 8000454:	4619      	mov	r1, r3
 8000456:	4817      	ldr	r0, [pc, #92]	; (80004b4 <bootloader_jump_to_user_app+0x88>)
 8000458:	f000 f8ce 	bl	80005f8 <BL_CRC_Verify>
 800045c:	4603      	mov	r3, r0
 800045e:	2b01      	cmp	r3, #1
 8000460:	d122      	bne.n	80004a8 <bootloader_jump_to_user_app+0x7c>
	{
		BL_Send_ACK(1);
 8000462:	2001      	movs	r0, #1
 8000464:	f000 f89c 	bl	80005a0 <BL_Send_ACK>
		HAL_UART_Transmit(&huart2,(uint8_t*)FLASH_SECTOR2_BASE_ADDRESS,4,HAL_MAX_DELAY);
 8000468:	f04f 33ff 	mov.w	r3, #4294967295
 800046c:	2204      	movs	r2, #4
 800046e:	4912      	ldr	r1, [pc, #72]	; (80004b8 <bootloader_jump_to_user_app+0x8c>)
 8000470:	4812      	ldr	r0, [pc, #72]	; (80004bc <bootloader_jump_to_user_app+0x90>)
 8000472:	f001 fcfa 	bl	8001e6a <HAL_UART_Transmit>
 8000476:	2301      	movs	r3, #1
 8000478:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8000480:	b672      	cpsid	i

		//disbale interuppts
		__set_PRIMASK(1);
		__disable_irq();

		SCB->VTOR = FLASH_SECTOR2_BASE_ADDRESS;
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <bootloader_jump_to_user_app+0x94>)
 8000484:	4a0c      	ldr	r2, [pc, #48]	; (80004b8 <bootloader_jump_to_user_app+0x8c>)
 8000486:	609a      	str	r2, [r3, #8]

		// 1. configure the MSP by reading the value from the base address of the sector 2
		uint32_t msp_value = *(__IO uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 8000488:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <bootloader_jump_to_user_app+0x8c>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	61fb      	str	r3, [r7, #28]
 800048e:	69fb      	ldr	r3, [r7, #28]
 8000490:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000492:	693b      	ldr	r3, [r7, #16]
 8000494:	f383 8808 	msr	MSP, r3

		__set_MSP(msp_value);

		uint32_t resethandler_address = *(__IO uint32_t *) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 8000498:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <bootloader_jump_to_user_app+0x98>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	61bb      	str	r3, [r7, #24]

		Reset_Handler = (void*) resethandler_address;
 800049e:	69bb      	ldr	r3, [r7, #24]
 80004a0:	617b      	str	r3, [r7, #20]

		//3. jump to reset handler of the user application
		Reset_Handler();
 80004a2:	697b      	ldr	r3, [r7, #20]
 80004a4:	4798      	blx	r3
	}
	else
	{
		BL_Send_NACK();
	}
}
 80004a6:	e001      	b.n	80004ac <bootloader_jump_to_user_app+0x80>
		BL_Send_NACK();
 80004a8:	f000 f894 	bl	80005d4 <BL_Send_NACK>
}
 80004ac:	bf00      	nop
 80004ae:	3728      	adds	r7, #40	; 0x28
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	2000002c 	.word	0x2000002c
 80004b8:	08008000 	.word	0x08008000
 80004bc:	20000140 	.word	0x20000140
 80004c0:	e000ed00 	.word	0xe000ed00
 80004c4:	08008004 	.word	0x08008004

080004c8 <BL_FetchCmd>:



BL_Status BL_FetchCmd()
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0

	uint8_t Data_Length = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	71bb      	strb	r3, [r7, #6]
	BL_Status status = BL_ACK ;
 80004d2:	2301      	movs	r3, #1
 80004d4:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status= HAL_ERROR ;
 80004d6:	2301      	movs	r3, #1
 80004d8:	717b      	strb	r3, [r7, #5]
	memset(Host_Buffer,0,HOST_MAX_SIZE);
 80004da:	22c8      	movs	r2, #200	; 0xc8
 80004dc:	2100      	movs	r1, #0
 80004de:	482d      	ldr	r0, [pc, #180]	; (8000594 <BL_FetchCmd+0xcc>)
 80004e0:	f001 fef4 	bl	80022cc <memset>
	HAL_Status =  HAL_UART_Receive(&huart2,Host_Buffer,1,HAL_MAX_DELAY);
 80004e4:	f04f 33ff 	mov.w	r3, #4294967295
 80004e8:	2201      	movs	r2, #1
 80004ea:	492a      	ldr	r1, [pc, #168]	; (8000594 <BL_FetchCmd+0xcc>)
 80004ec:	482a      	ldr	r0, [pc, #168]	; (8000598 <BL_FetchCmd+0xd0>)
 80004ee:	f001 fd4e 	bl	8001f8e <HAL_UART_Receive>
 80004f2:	4603      	mov	r3, r0
 80004f4:	717b      	strb	r3, [r7, #5]
	if(HAL_Status != HAL_OK)
 80004f6:	797b      	ldrb	r3, [r7, #5]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d002      	beq.n	8000502 <BL_FetchCmd+0x3a>
	{
		status = BL_NACK ;
 80004fc:	2300      	movs	r3, #0
 80004fe:	71fb      	strb	r3, [r7, #7]
 8000500:	e042      	b.n	8000588 <BL_FetchCmd+0xc0>
	}
	else {
		Data_Length = Host_Buffer[0] ;
 8000502:	4b24      	ldr	r3, [pc, #144]	; (8000594 <BL_FetchCmd+0xcc>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	71bb      	strb	r3, [r7, #6]
		HAL_Status =  HAL_UART_Receive(&huart2,&Host_Buffer[1],Data_Length,HAL_MAX_DELAY);
 8000508:	79bb      	ldrb	r3, [r7, #6]
 800050a:	b29a      	uxth	r2, r3
 800050c:	f04f 33ff 	mov.w	r3, #4294967295
 8000510:	4922      	ldr	r1, [pc, #136]	; (800059c <BL_FetchCmd+0xd4>)
 8000512:	4821      	ldr	r0, [pc, #132]	; (8000598 <BL_FetchCmd+0xd0>)
 8000514:	f001 fd3b 	bl	8001f8e <HAL_UART_Receive>
 8000518:	4603      	mov	r3, r0
 800051a:	717b      	strb	r3, [r7, #5]
		if(HAL_Status != HAL_OK)
 800051c:	797b      	ldrb	r3, [r7, #5]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d002      	beq.n	8000528 <BL_FetchCmd+0x60>
		{
			status = BL_NACK ;
 8000522:	2300      	movs	r3, #0
 8000524:	71fb      	strb	r3, [r7, #7]
 8000526:	e02f      	b.n	8000588 <BL_FetchCmd+0xc0>
		}
		else {
			switch(Host_Buffer[1])
 8000528:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <BL_FetchCmd+0xcc>)
 800052a:	785b      	ldrb	r3, [r3, #1]
 800052c:	3b10      	subs	r3, #16
 800052e:	2b06      	cmp	r3, #6
 8000530:	d828      	bhi.n	8000584 <BL_FetchCmd+0xbc>
 8000532:	a201      	add	r2, pc, #4	; (adr r2, 8000538 <BL_FetchCmd+0x70>)
 8000534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000538:	08000555 	.word	0x08000555
 800053c:	0800055d 	.word	0x0800055d
 8000540:	08000565 	.word	0x08000565
 8000544:	08000585 	.word	0x08000585
 8000548:	0800056d 	.word	0x0800056d
 800054c:	08000575 	.word	0x08000575
 8000550:	0800057d 	.word	0x0800057d
			{
			case CBL_GET_VER_CMD :CBL_GET_Version(Host_Buffer);break;
 8000554:	480f      	ldr	r0, [pc, #60]	; (8000594 <BL_FetchCmd+0xcc>)
 8000556:	f7ff fdf9 	bl	800014c <CBL_GET_Version>
 800055a:	e015      	b.n	8000588 <BL_FetchCmd+0xc0>
			case CBL_GET_HELP_CMD :CBL_GET_Help(Host_Buffer);break;
 800055c:	480d      	ldr	r0, [pc, #52]	; (8000594 <BL_FetchCmd+0xcc>)
 800055e:	f7ff fe2b 	bl	80001b8 <CBL_GET_Help>
 8000562:	e011      	b.n	8000588 <BL_FetchCmd+0xc0>
			case CBL_GET_CID_CMD :CBL_GET_Chip_Identification_Number(Host_Buffer);break;
 8000564:	480b      	ldr	r0, [pc, #44]	; (8000594 <BL_FetchCmd+0xcc>)
 8000566:	f7ff fe63 	bl	8000230 <CBL_GET_Chip_Identification_Number>
 800056a:	e00d      	b.n	8000588 <BL_FetchCmd+0xc0>
			case CBL_GO_TO_ADDR_CMD :bootloader_jump_to_user_app(Host_Buffer);break;
 800056c:	4809      	ldr	r0, [pc, #36]	; (8000594 <BL_FetchCmd+0xcc>)
 800056e:	f7ff ff5d 	bl	800042c <bootloader_jump_to_user_app>
 8000572:	e009      	b.n	8000588 <BL_FetchCmd+0xc0>
			case CBL_FLASH_ERASE_CMD :CBL_Flash_Erase(Host_Buffer);break;
 8000574:	4807      	ldr	r0, [pc, #28]	; (8000594 <BL_FetchCmd+0xcc>)
 8000576:	f7ff fe97 	bl	80002a8 <CBL_Flash_Erase>
 800057a:	e005      	b.n	8000588 <BL_FetchCmd+0xc0>
			case CBL_MEM_WRITE_CMD :CBL_Write_Data(Host_Buffer);break;
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <BL_FetchCmd+0xcc>)
 800057e:	f7ff fed3 	bl	8000328 <CBL_Write_Data>
 8000582:	e001      	b.n	8000588 <BL_FetchCmd+0xc0>
			default : status = BL_NACK ;
 8000584:	2300      	movs	r3, #0
 8000586:	71fb      	strb	r3, [r7, #7]
			}

		}
	}
	return status;
 8000588:	79fb      	ldrb	r3, [r7, #7]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	2000002c 	.word	0x2000002c
 8000598:	20000140 	.word	0x20000140
 800059c:	2000002d 	.word	0x2000002d

080005a0 <BL_Send_ACK>:




static void BL_Send_ACK(uint8_t Data_len)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	uint8_t ACK_Value[2]= {0};
 80005aa:	2300      	movs	r3, #0
 80005ac:	81bb      	strh	r3, [r7, #12]
	ACK_Value[0]=Send_ACK;
 80005ae:	23cd      	movs	r3, #205	; 0xcd
 80005b0:	733b      	strb	r3, [r7, #12]
	ACK_Value[1]=Data_len ;
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&huart2,(uint8_t*)ACK_Value,2,HAL_MAX_DELAY);
 80005b6:	f107 010c 	add.w	r1, r7, #12
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	2202      	movs	r2, #2
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <BL_Send_ACK+0x30>)
 80005c2:	f001 fc52 	bl	8001e6a <HAL_UART_Transmit>
}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000140 	.word	0x20000140

080005d4 <BL_Send_NACK>:



static void BL_Send_NACK()
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
	uint8_t ACK_Value=Send_NACK;
 80005da:	23ab      	movs	r3, #171	; 0xab
 80005dc:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2,&ACK_Value,sizeof(ACK_Value),HAL_MAX_DELAY);
 80005de:	1df9      	adds	r1, r7, #7
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295
 80005e4:	2201      	movs	r2, #1
 80005e6:	4803      	ldr	r0, [pc, #12]	; (80005f4 <BL_Send_NACK+0x20>)
 80005e8:	f001 fc3f 	bl	8001e6a <HAL_UART_Transmit>

}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000140 	.word	0x20000140

080005f8 <BL_CRC_Verify>:
static uint32_t BL_CRC_Verify(uint8_t* Pdata, uint32_t DataLen, uint32_t HostCRC)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFYING_FAILED ;
 8000604:	2300      	movs	r3, #0
 8000606:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_CRC = 0 ;
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]
	uint32_t DataBuffer=0 ;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
	for(uint8_t count = 0; count<DataLen ; count++)
 8000610:	2300      	movs	r3, #0
 8000612:	75fb      	strb	r3, [r7, #23]
 8000614:	e00f      	b.n	8000636 <BL_CRC_Verify+0x3e>
	{
		DataBuffer = (uint32_t)Pdata[count] ;
 8000616:	7dfb      	ldrb	r3, [r7, #23]
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	4413      	add	r3, r2
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	613b      	str	r3, [r7, #16]
		MCU_CRC = HAL_CRC_Accumulate(&hcrc,&DataBuffer,1) ;
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	2201      	movs	r2, #1
 8000626:	4619      	mov	r1, r3
 8000628:	4810      	ldr	r0, [pc, #64]	; (800066c <BL_CRC_Verify+0x74>)
 800062a:	f000 fc30 	bl	8000e8e <HAL_CRC_Accumulate>
 800062e:	61b8      	str	r0, [r7, #24]
	for(uint8_t count = 0; count<DataLen ; count++)
 8000630:	7dfb      	ldrb	r3, [r7, #23]
 8000632:	3301      	adds	r3, #1
 8000634:	75fb      	strb	r3, [r7, #23]
 8000636:	7dfb      	ldrb	r3, [r7, #23]
 8000638:	68ba      	ldr	r2, [r7, #8]
 800063a:	429a      	cmp	r2, r3
 800063c:	d8eb      	bhi.n	8000616 <BL_CRC_Verify+0x1e>
	}
	__HAL_CRC_DR_RESET(&hcrc) ;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <BL_CRC_Verify+0x74>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	689a      	ldr	r2, [r3, #8]
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <BL_CRC_Verify+0x74>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f042 0201 	orr.w	r2, r2, #1
 800064c:	609a      	str	r2, [r3, #8]
	if(HostCRC == MCU_CRC)
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	69bb      	ldr	r3, [r7, #24]
 8000652:	429a      	cmp	r2, r3
 8000654:	d102      	bne.n	800065c <BL_CRC_Verify+0x64>
	{
		CRC_Status = CRC_VERIFYING_PASS ;
 8000656:	2301      	movs	r3, #1
 8000658:	77fb      	strb	r3, [r7, #31]
 800065a:	e001      	b.n	8000660 <BL_CRC_Verify+0x68>
	}
	else
	{
		CRC_Status = CRC_VERIFYING_FAILED ;
 800065c:	2300      	movs	r3, #0
 800065e:	77fb      	strb	r3, [r7, #31]
	}
	return CRC_Status;
 8000660:	7ffb      	ldrb	r3, [r7, #31]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3720      	adds	r7, #32
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200000f4 	.word	0x200000f4

08000670 <Perform_Flash_Erase>:
static uint8_t Perform_Flash_Erase(uint32_t Page_Address , uint8_t Page_Number)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR ;
 800067c:	2301      	movs	r3, #1
 800067e:	77bb      	strb	r3, [r7, #30]
	FLASH_EraseInitTypeDef pEraseInit ;
	uint32_t PageError = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
	uint8_t Page_Status = INVALID_PAGE_NUMBER ;
 8000684:	2300      	movs	r3, #0
 8000686:	77fb      	strb	r3, [r7, #31]
	if(Page_Number > CBL_FLASH_MAX_PAGE_NUMBER)
 8000688:	78fb      	ldrb	r3, [r7, #3]
 800068a:	2b10      	cmp	r3, #16
 800068c:	d902      	bls.n	8000694 <Perform_Flash_Erase+0x24>
	{
		Page_Status = INVALID_PAGE_NUMBER ;
 800068e:	2300      	movs	r3, #0
 8000690:	77fb      	strb	r3, [r7, #31]
 8000692:	e035      	b.n	8000700 <Perform_Flash_Erase+0x90>
	}
	else
	{
		Page_Status = VALID_PAGE_NUMBER ;
 8000694:	2301      	movs	r3, #1
 8000696:	77fb      	strb	r3, [r7, #31]
		if(Page_Number <= (CBL_FLASH_MAX_PAGE_NUMBER-1) || Page_Address == CBL_FLASH_MASS_ERASE )
 8000698:	78fb      	ldrb	r3, [r7, #3]
 800069a:	2b0f      	cmp	r3, #15
 800069c:	d902      	bls.n	80006a4 <Perform_Flash_Erase+0x34>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2bff      	cmp	r3, #255	; 0xff
 80006a2:	d12b      	bne.n	80006fc <Perform_Flash_Erase+0x8c>
		{
			if(Page_Address == CBL_FLASH_MASS_ERASE)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2bff      	cmp	r3, #255	; 0xff
 80006a8:	d108      	bne.n	80006bc <Perform_Flash_Erase+0x4c>
			{
				pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES ;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
				pEraseInit.Banks = FLASH_BANK_1 ;
 80006ae:	2301      	movs	r3, #1
 80006b0:	613b      	str	r3, [r7, #16]
				pEraseInit.PageAddress = 0x8008000 ;
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <Perform_Flash_Erase+0x9c>)
 80006b4:	617b      	str	r3, [r7, #20]
				pEraseInit.NbPages = 12 ;
 80006b6:	230c      	movs	r3, #12
 80006b8:	61bb      	str	r3, [r7, #24]
 80006ba:	e007      	b.n	80006cc <Perform_Flash_Erase+0x5c>
			}
			else
			{
				pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES ;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
				pEraseInit.Banks = FLASH_BANK_1 ;
 80006c0:	2301      	movs	r3, #1
 80006c2:	613b      	str	r3, [r7, #16]
				pEraseInit.PageAddress = Page_Address ;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	617b      	str	r3, [r7, #20]
				pEraseInit.NbPages = Page_Number ;
 80006c8:	78fb      	ldrb	r3, [r7, #3]
 80006ca:	61bb      	str	r3, [r7, #24]
			}
			HAL_FLASH_Unlock();
 80006cc:	f000 fc7a 	bl	8000fc4 <HAL_FLASH_Unlock>
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80006d0:	f107 0208 	add.w	r2, r7, #8
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	4611      	mov	r1, r2
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fd5a 	bl	8001194 <HAL_FLASHEx_Erase>
 80006e0:	4603      	mov	r3, r0
 80006e2:	77bb      	strb	r3, [r7, #30]
			HAL_FLASH_Lock();
 80006e4:	f000 fc94 	bl	8001010 <HAL_FLASH_Lock>
			if(PageError == HAL_SUCCESSFUL_ERASE)
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ee:	d102      	bne.n	80006f6 <Perform_Flash_Erase+0x86>
			{
				Page_Status = SUCCESSFUL_ERASE ;
 80006f0:	2303      	movs	r3, #3
 80006f2:	77fb      	strb	r3, [r7, #31]
			if(PageError == HAL_SUCCESSFUL_ERASE)
 80006f4:	e004      	b.n	8000700 <Perform_Flash_Erase+0x90>
			}
			else
			{
				Page_Status = UNSUCCESSFUL_ERASE ;
 80006f6:	2302      	movs	r3, #2
 80006f8:	77fb      	strb	r3, [r7, #31]
			if(PageError == HAL_SUCCESSFUL_ERASE)
 80006fa:	e001      	b.n	8000700 <Perform_Flash_Erase+0x90>
			}

		}
		else
		{
			Page_Status = INVALID_PAGE_NUMBER ;
 80006fc:	2300      	movs	r3, #0
 80006fe:	77fb      	strb	r3, [r7, #31]
		}
	}
	return Page_Status ;
 8000700:	7ffb      	ldrb	r3, [r7, #31]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3720      	adds	r7, #32
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	08008000 	.word	0x08008000

08000710 <FlashMemory_Write>:

static uint8_t FlashMemory_Write(uint16_t *Pdata , uint32_t Start_Address , uint8_t Payload_Len)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b089      	sub	sp, #36	; 0x24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	4613      	mov	r3, r2
 800071c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR ;
 800071e:	2301      	movs	r3, #1
 8000720:	773b      	strb	r3, [r7, #28]
	uint32_t address = 0 ;
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
	uint8_t Update_Address = 0 ;
 8000726:	2300      	movs	r3, #0
 8000728:	75fb      	strb	r3, [r7, #23]
	uint8_t Payload_Status = FLASH_PAYLOAD_WRITE_FAILED ;
 800072a:	2300      	movs	r3, #0
 800072c:	77fb      	strb	r3, [r7, #31]
	HAL_FLASH_Unlock();
 800072e:	f000 fc49 	bl	8000fc4 <HAL_FLASH_Unlock>

	for(uint8_t payload_count = 0,Update_Address = 0 ; payload_count< Payload_Len/2 ; payload_count++,Update_Address+=2)
 8000732:	2300      	movs	r3, #0
 8000734:	77bb      	strb	r3, [r7, #30]
 8000736:	2300      	movs	r3, #0
 8000738:	777b      	strb	r3, [r7, #29]
 800073a:	e021      	b.n	8000780 <FlashMemory_Write+0x70>
	{
		address = Start_Address + Update_Address ;
 800073c:	7f7b      	ldrb	r3, [r7, #29]
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	4413      	add	r3, r2
 8000742:	61bb      	str	r3, [r7, #24]
		HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Pdata[payload_count]);
 8000744:	7fbb      	ldrb	r3, [r7, #30]
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	b29b      	uxth	r3, r3
 8000750:	f04f 0400 	mov.w	r4, #0
 8000754:	461a      	mov	r2, r3
 8000756:	4623      	mov	r3, r4
 8000758:	69b9      	ldr	r1, [r7, #24]
 800075a:	2001      	movs	r0, #1
 800075c:	f000 fbc2 	bl	8000ee4 <HAL_FLASH_Program>
 8000760:	4603      	mov	r3, r0
 8000762:	773b      	strb	r3, [r7, #28]
		if(HAL_Status != HAL_OK)
 8000764:	7f3b      	ldrb	r3, [r7, #28]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d002      	beq.n	8000770 <FlashMemory_Write+0x60>
		{
			Payload_Status = FLASH_PAYLOAD_WRITE_FAILED ;
 800076a:	2300      	movs	r3, #0
 800076c:	77fb      	strb	r3, [r7, #31]
 800076e:	e001      	b.n	8000774 <FlashMemory_Write+0x64>
		}
		else
		{
			Payload_Status = FLASH_PAYLOAD_WRITE_PASSED ;
 8000770:	2301      	movs	r3, #1
 8000772:	77fb      	strb	r3, [r7, #31]
	for(uint8_t payload_count = 0,Update_Address = 0 ; payload_count< Payload_Len/2 ; payload_count++,Update_Address+=2)
 8000774:	7fbb      	ldrb	r3, [r7, #30]
 8000776:	3301      	adds	r3, #1
 8000778:	77bb      	strb	r3, [r7, #30]
 800077a:	7f7b      	ldrb	r3, [r7, #29]
 800077c:	3302      	adds	r3, #2
 800077e:	777b      	strb	r3, [r7, #29]
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	085b      	lsrs	r3, r3, #1
 8000784:	b2db      	uxtb	r3, r3
 8000786:	7fba      	ldrb	r2, [r7, #30]
 8000788:	429a      	cmp	r2, r3
 800078a:	d3d7      	bcc.n	800073c <FlashMemory_Write+0x2c>
		}
	}
	//HAL_FLASH_Lock();
	return Payload_Status ;
 800078c:	7ffb      	ldrb	r3, [r7, #31]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3724      	adds	r7, #36	; 0x24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd90      	pop	{r4, r7, pc}
	...

08000798 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_CRC_Init+0x20>)
 800079e:	4a07      	ldr	r2, [pc, #28]	; (80007bc <MX_CRC_Init+0x24>)
 80007a0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_CRC_Init+0x20>)
 80007a4:	f000 fb57 	bl	8000e56 <HAL_CRC_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007ae:	f000 f8a4 	bl	80008fa <Error_Handler>
  }

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000f4 	.word	0x200000f4
 80007bc:	40023000 	.word	0x40023000

080007c0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a09      	ldr	r2, [pc, #36]	; (80007f4 <HAL_CRC_MspInit+0x34>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d10b      	bne.n	80007ea <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <HAL_CRC_MspInit+0x38>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <HAL_CRC_MspInit+0x38>)
 80007d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007dc:	6153      	str	r3, [r2, #20]
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_CRC_MspInit+0x38>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007ea:	bf00      	nop
 80007ec:	3714      	adds	r7, #20
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	40023000 	.word	0x40023000
 80007f8:	40021000 	.word	0x40021000

080007fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_GPIO_Init+0x58>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	4a13      	ldr	r2, [pc, #76]	; (8000854 <MX_GPIO_Init+0x58>)
 8000808:	f043 0320 	orr.w	r3, r3, #32
 800080c:	6193      	str	r3, [r2, #24]
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_GPIO_Init+0x58>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	f003 0320 	and.w	r3, r3, #32
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_GPIO_Init+0x58>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <MX_GPIO_Init+0x58>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6193      	str	r3, [r2, #24]
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_GPIO_Init+0x58>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_GPIO_Init+0x58>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	4a07      	ldr	r2, [pc, #28]	; (8000854 <MX_GPIO_Init+0x58>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6193      	str	r3, [r2, #24]
 800083e:	4b05      	ldr	r3, [pc, #20]	; (8000854 <MX_GPIO_Init+0x58>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

}
 800084a:	bf00      	nop
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	40021000 	.word	0x40021000

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085e:	f000 f9b5 	bl	8000bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000862:	f000 f80f 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000866:	f7ff ffc9 	bl	80007fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800086a:	f000 f8af 	bl	80009cc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800086e:	f000 f8d7 	bl	8000a20 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000872:	f7ff ff91 	bl	8000798 <MX_CRC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /*char string[]="hello salah" ;
  HAL_UART_Transmit(&huart2, string, sizeof(string), HAL_MAX_DELAY) ;*/
  BL_Status status = BL_NACK ;
 8000876:	2300      	movs	r3, #0
 8000878:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  status = BL_FetchCmd();
 800087a:	f7ff fe25 	bl	80004c8 <BL_FetchCmd>
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
 8000882:	e7fa      	b.n	800087a <main+0x22>

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b090      	sub	sp, #64	; 0x40
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0318 	add.w	r3, r7, #24
 800088e:	2228      	movs	r2, #40	; 0x28
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fd1a 	bl	80022cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a6:	2302      	movs	r3, #2
 80008a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008aa:	2301      	movs	r3, #1
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ae:	2310      	movs	r3, #16
 80008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b6:	f107 0318 	add.w	r3, r7, #24
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fe6c 	bl	8001598 <HAL_RCC_OscConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008c6:	f000 f818 	bl	80008fa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ca:	230f      	movs	r3, #15
 80008cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 f8d8 	bl	8001a98 <HAL_RCC_ClockConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008ee:	f000 f804 	bl	80008fa <Error_Handler>
  }
}
 80008f2:	bf00      	nop
 80008f4:	3740      	adds	r7, #64	; 0x40
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
	...

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <HAL_MspInit+0x5c>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	4a14      	ldr	r2, [pc, #80]	; (8000964 <HAL_MspInit+0x5c>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6193      	str	r3, [r2, #24]
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_MspInit+0x5c>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <HAL_MspInit+0x5c>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <HAL_MspInit+0x5c>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	61d3      	str	r3, [r2, #28]
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_MspInit+0x5c>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <HAL_MspInit+0x60>)
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <HAL_MspInit+0x60>)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	40021000 	.word	0x40021000
 8000968:	40010000 	.word	0x40010000

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <HardFault_Handler+0x4>

0800097e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <MemManage_Handler+0x4>

08000984 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <BusFault_Handler+0x4>

0800098a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <UsageFault_Handler+0x4>

08000990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 f94e 	bl	8000c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <MX_USART2_UART_Init+0x50>)
 80009d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_USART2_UART_Init+0x4c>)
 8000a04:	f001 f9e4 	bl	8001dd0 <HAL_UART_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a0e:	f7ff ff74 	bl	80008fa <Error_Handler>
  }

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000140 	.word	0x20000140
 8000a1c:	40004400 	.word	0x40004400

08000a20 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_USART3_UART_Init+0x4c>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <MX_USART3_UART_Init+0x50>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_USART3_UART_Init+0x4c>)
 8000a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_USART3_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_USART3_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_USART3_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_USART3_UART_Init+0x4c>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_USART3_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_USART3_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_USART3_UART_Init+0x4c>)
 8000a58:	f001 f9ba 	bl	8001dd0 <HAL_UART_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a62:	f7ff ff4a 	bl	80008fa <Error_Handler>
  }

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200000fc 	.word	0x200000fc
 8000a70:	40004800 	.word	0x40004800

08000a74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0318 	add.w	r3, r7, #24
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a37      	ldr	r2, [pc, #220]	; (8000b6c <HAL_UART_MspInit+0xf8>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d130      	bne.n	8000af6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a94:	4b36      	ldr	r3, [pc, #216]	; (8000b70 <HAL_UART_MspInit+0xfc>)
 8000a96:	69db      	ldr	r3, [r3, #28]
 8000a98:	4a35      	ldr	r2, [pc, #212]	; (8000b70 <HAL_UART_MspInit+0xfc>)
 8000a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9e:	61d3      	str	r3, [r2, #28]
 8000aa0:	4b33      	ldr	r3, [pc, #204]	; (8000b70 <HAL_UART_MspInit+0xfc>)
 8000aa2:	69db      	ldr	r3, [r3, #28]
 8000aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <HAL_UART_MspInit+0xfc>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a2f      	ldr	r2, [pc, #188]	; (8000b70 <HAL_UART_MspInit+0xfc>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <HAL_UART_MspInit+0xfc>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	f107 0318 	add.w	r3, r7, #24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4827      	ldr	r0, [pc, #156]	; (8000b74 <HAL_UART_MspInit+0x100>)
 8000ad8:	f000 fc04 	bl	80012e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000adc:	2308      	movs	r3, #8
 8000ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 0318 	add.w	r3, r7, #24
 8000aec:	4619      	mov	r1, r3
 8000aee:	4821      	ldr	r0, [pc, #132]	; (8000b74 <HAL_UART_MspInit+0x100>)
 8000af0:	f000 fbf8 	bl	80012e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000af4:	e036      	b.n	8000b64 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a1f      	ldr	r2, [pc, #124]	; (8000b78 <HAL_UART_MspInit+0x104>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d131      	bne.n	8000b64 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <HAL_UART_MspInit+0xfc>)
 8000b02:	69db      	ldr	r3, [r3, #28]
 8000b04:	4a1a      	ldr	r2, [pc, #104]	; (8000b70 <HAL_UART_MspInit+0xfc>)
 8000b06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b0a:	61d3      	str	r3, [r2, #28]
 8000b0c:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <HAL_UART_MspInit+0xfc>)
 8000b0e:	69db      	ldr	r3, [r3, #28]
 8000b10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_UART_MspInit+0xfc>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <HAL_UART_MspInit+0xfc>)
 8000b1e:	f043 0308 	orr.w	r3, r3, #8
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_UART_MspInit+0xfc>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0308 	and.w	r3, r3, #8
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 0318 	add.w	r3, r7, #24
 8000b42:	4619      	mov	r1, r3
 8000b44:	480d      	ldr	r0, [pc, #52]	; (8000b7c <HAL_UART_MspInit+0x108>)
 8000b46:	f000 fbcd 	bl	80012e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	f107 0318 	add.w	r3, r7, #24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4807      	ldr	r0, [pc, #28]	; (8000b7c <HAL_UART_MspInit+0x108>)
 8000b60:	f000 fbc0 	bl	80012e4 <HAL_GPIO_Init>
}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	; 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40004400 	.word	0x40004400
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40010800 	.word	0x40010800
 8000b78:	40004800 	.word	0x40004800
 8000b7c:	40010c00 	.word	0x40010c00

08000b80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b82:	490d      	ldr	r1, [pc, #52]	; (8000bb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b84:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b98:	4c0a      	ldr	r4, [pc, #40]	; (8000bc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ba6:	f7ff ff0b 	bl	80009c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000baa:	f001 fb6b 	bl	8002284 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bae:	f7ff fe53 	bl	8000858 <main>
  bx lr
 8000bb2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bbc:	08002334 	.word	0x08002334
  ldr r2, =_sbss
 8000bc0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bc4:	200001a8 	.word	0x200001a8

08000bc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC1_2_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_Init+0x28>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_Init+0x28>)
 8000bd6:	f043 0310 	orr.w	r3, r3, #16
 8000bda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 f907 	bl	8000df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be2:	2000      	movs	r0, #0
 8000be4:	f000 f808 	bl	8000bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be8:	f7ff fe8e 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40022000 	.word	0x40022000

08000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_InitTick+0x54>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_InitTick+0x58>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f911 	bl	8000e3e <HAL_SYSTICK_Config>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00e      	b.n	8000c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	d80a      	bhi.n	8000c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f000 f8e7 	bl	8000e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c38:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <HAL_InitTick+0x5c>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e000      	b.n	8000c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000004 	.word	0x20000004

08000c58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <HAL_IncTick+0x1c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_IncTick+0x20>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a03      	ldr	r2, [pc, #12]	; (8000c78 <HAL_IncTick+0x20>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000184 	.word	0x20000184

08000c7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b02      	ldr	r3, [pc, #8]	; (8000c8c <HAL_GetTick+0x10>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	20000184 	.word	0x20000184

08000c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cac:	4013      	ands	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc2:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	60d3      	str	r3, [r2, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	0a1b      	lsrs	r3, r3, #8
 8000ce2:	f003 0307 	and.w	r3, r3, #7
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db0a      	blt.n	8000d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	490c      	ldr	r1, [pc, #48]	; (8000d40 <__NVIC_SetPriority+0x4c>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	0112      	lsls	r2, r2, #4
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	440b      	add	r3, r1
 8000d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d1c:	e00a      	b.n	8000d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4908      	ldr	r1, [pc, #32]	; (8000d44 <__NVIC_SetPriority+0x50>)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	3b04      	subs	r3, #4
 8000d2c:	0112      	lsls	r2, r2, #4
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	440b      	add	r3, r1
 8000d32:	761a      	strb	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f1c3 0307 	rsb	r3, r3, #7
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	bf28      	it	cs
 8000d66:	2304      	movcs	r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d902      	bls.n	8000d78 <NVIC_EncodePriority+0x30>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3b03      	subs	r3, #3
 8000d76:	e000      	b.n	8000d7a <NVIC_EncodePriority+0x32>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43da      	mvns	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43d9      	mvns	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	4313      	orrs	r3, r2
         );
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3724      	adds	r7, #36	; 0x24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dbc:	d301      	bcc.n	8000dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00f      	b.n	8000de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <SysTick_Config+0x40>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dca:	210f      	movs	r1, #15
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f7ff ff90 	bl	8000cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <SysTick_Config+0x40>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <SysTick_Config+0x40>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff49 	bl	8000c90 <__NVIC_SetPriorityGrouping>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
 8000e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e18:	f7ff ff5e 	bl	8000cd8 <__NVIC_GetPriorityGrouping>
 8000e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff ff90 	bl	8000d48 <NVIC_EncodePriority>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff5f 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ffb0 	bl	8000dac <SysTick_Config>
 8000e4c:	4603      	mov	r3, r0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d101      	bne.n	8000e68 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e00e      	b.n	8000e86 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	795b      	ldrb	r3, [r3, #5]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d105      	bne.n	8000e7e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff fca1 	bl	80007c0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2201      	movs	r2, #1
 8000e82:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b087      	sub	sp, #28
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	e00a      	b.n	8000ec0 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	441a      	add	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6812      	ldr	r2, [r2, #0]
 8000eb8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d3f0      	bcc.n	8000eaa <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8000ed6:	693b      	ldr	r3, [r7, #16]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	371c      	adds	r7, #28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
	...

08000ee4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000efe:	4b2f      	ldr	r3, [pc, #188]	; (8000fbc <HAL_FLASH_Program+0xd8>)
 8000f00:	7e1b      	ldrb	r3, [r3, #24]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d101      	bne.n	8000f0a <HAL_FLASH_Program+0x26>
 8000f06:	2302      	movs	r3, #2
 8000f08:	e054      	b.n	8000fb4 <HAL_FLASH_Program+0xd0>
 8000f0a:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <HAL_FLASH_Program+0xd8>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f14:	f000 f8a8 	bl	8001068 <FLASH_WaitForLastOperation>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000f1c:	7dfb      	ldrb	r3, [r7, #23]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d144      	bne.n	8000fac <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d102      	bne.n	8000f2e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	757b      	strb	r3, [r7, #21]
 8000f2c:	e007      	b.n	8000f3e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d102      	bne.n	8000f3a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000f34:	2302      	movs	r3, #2
 8000f36:	757b      	strb	r3, [r7, #21]
 8000f38:	e001      	b.n	8000f3e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	75bb      	strb	r3, [r7, #22]
 8000f42:	e02d      	b.n	8000fa0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f44:	7dbb      	ldrb	r3, [r7, #22]
 8000f46:	005a      	lsls	r2, r3, #1
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	eb02 0c03 	add.w	ip, r2, r3
 8000f4e:	7dbb      	ldrb	r3, [r7, #22]
 8000f50:	0119      	lsls	r1, r3, #4
 8000f52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f56:	f1c1 0620 	rsb	r6, r1, #32
 8000f5a:	f1a1 0020 	sub.w	r0, r1, #32
 8000f5e:	fa22 f401 	lsr.w	r4, r2, r1
 8000f62:	fa03 f606 	lsl.w	r6, r3, r6
 8000f66:	4334      	orrs	r4, r6
 8000f68:	fa23 f000 	lsr.w	r0, r3, r0
 8000f6c:	4304      	orrs	r4, r0
 8000f6e:	fa23 f501 	lsr.w	r5, r3, r1
 8000f72:	b2a3      	uxth	r3, r4
 8000f74:	4619      	mov	r1, r3
 8000f76:	4660      	mov	r0, ip
 8000f78:	f000 f85a 	bl	8001030 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f80:	f000 f872 	bl	8001068 <FLASH_WaitForLastOperation>
 8000f84:	4603      	mov	r3, r0
 8000f86:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <HAL_FLASH_Program+0xdc>)
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <HAL_FLASH_Program+0xdc>)
 8000f8e:	f023 0301 	bic.w	r3, r3, #1
 8000f92:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d107      	bne.n	8000faa <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000f9a:	7dbb      	ldrb	r3, [r7, #22]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	75bb      	strb	r3, [r7, #22]
 8000fa0:	7dba      	ldrb	r2, [r7, #22]
 8000fa2:	7d7b      	ldrb	r3, [r7, #21]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d3cd      	bcc.n	8000f44 <HAL_FLASH_Program+0x60>
 8000fa8:	e000      	b.n	8000fac <HAL_FLASH_Program+0xc8>
      {
        break;
 8000faa:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <HAL_FLASH_Program+0xd8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	761a      	strb	r2, [r3, #24]

  return status;
 8000fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	371c      	adds	r7, #28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fbc:	20000188 	.word	0x20000188
 8000fc0:	40022000 	.word	0x40022000

08000fc4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <HAL_FLASH_Unlock+0x40>)
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00d      	beq.n	8000ff6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_FLASH_Unlock+0x40>)
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <HAL_FLASH_Unlock+0x44>)
 8000fde:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_FLASH_Unlock+0x40>)
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <HAL_FLASH_Unlock+0x48>)
 8000fe4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <HAL_FLASH_Unlock+0x40>)
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40022000 	.word	0x40022000
 8001008:	45670123 	.word	0x45670123
 800100c:	cdef89ab 	.word	0xcdef89ab

08001010 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <HAL_FLASH_Lock+0x1c>)
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_FLASH_Lock+0x1c>)
 800101a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40022000 	.word	0x40022000

08001030 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <FLASH_Program_HalfWord+0x30>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <FLASH_Program_HalfWord+0x34>)
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	4a07      	ldr	r2, [pc, #28]	; (8001064 <FLASH_Program_HalfWord+0x34>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	887a      	ldrh	r2, [r7, #2]
 8001052:	801a      	strh	r2, [r3, #0]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000188 	.word	0x20000188
 8001064:	40022000 	.word	0x40022000

08001068 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff fe04 	bl	8000c7c <HAL_GetTick>
 8001074:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001076:	e010      	b.n	800109a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800107e:	d00c      	beq.n	800109a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d007      	beq.n	8001096 <FLASH_WaitForLastOperation+0x2e>
 8001086:	f7ff fdf9 	bl	8000c7c <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	429a      	cmp	r2, r3
 8001094:	d201      	bcs.n	800109a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e025      	b.n	80010e6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <FLASH_WaitForLastOperation+0x88>)
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1e8      	bne.n	8001078 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <FLASH_WaitForLastOperation+0x88>)
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	f003 0320 	and.w	r3, r3, #32
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d002      	beq.n	80010b8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <FLASH_WaitForLastOperation+0x88>)
 80010b4:	2220      	movs	r2, #32
 80010b6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80010b8:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <FLASH_WaitForLastOperation+0x88>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	f003 0310 	and.w	r3, r3, #16
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d10b      	bne.n	80010dc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <FLASH_WaitForLastOperation+0x88>)
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d105      	bne.n	80010dc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <FLASH_WaitForLastOperation+0x88>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80010dc:	f000 f80a 	bl	80010f4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e000      	b.n	80010e6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40022000 	.word	0x40022000

080010f4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <FLASH_SetErrorCode+0x98>)
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	f003 0310 	and.w	r3, r3, #16
 8001106:	2b00      	cmp	r3, #0
 8001108:	d009      	beq.n	800111e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <FLASH_SetErrorCode+0x9c>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	f043 0302 	orr.w	r3, r3, #2
 8001112:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <FLASH_SetErrorCode+0x9c>)
 8001114:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f043 0310 	orr.w	r3, r3, #16
 800111c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <FLASH_SetErrorCode+0x98>)
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	2b00      	cmp	r3, #0
 8001128:	d009      	beq.n	800113e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <FLASH_SetErrorCode+0x9c>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	4a17      	ldr	r2, [pc, #92]	; (8001190 <FLASH_SetErrorCode+0x9c>)
 8001134:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <FLASH_SetErrorCode+0x98>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00b      	beq.n	8001162 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <FLASH_SetErrorCode+0x9c>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <FLASH_SetErrorCode+0x9c>)
 8001154:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <FLASH_SetErrorCode+0x98>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	4a0c      	ldr	r2, [pc, #48]	; (800118c <FLASH_SetErrorCode+0x98>)
 800115c:	f023 0301 	bic.w	r3, r3, #1
 8001160:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f240 1201 	movw	r2, #257	; 0x101
 8001168:	4293      	cmp	r3, r2
 800116a:	d106      	bne.n	800117a <FLASH_SetErrorCode+0x86>
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <FLASH_SetErrorCode+0x98>)
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	4a06      	ldr	r2, [pc, #24]	; (800118c <FLASH_SetErrorCode+0x98>)
 8001172:	f023 0301 	bic.w	r3, r3, #1
 8001176:	61d3      	str	r3, [r2, #28]
}  
 8001178:	e002      	b.n	8001180 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <FLASH_SetErrorCode+0x98>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	60d3      	str	r3, [r2, #12]
}  
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40022000 	.word	0x40022000
 8001190:	20000188 	.word	0x20000188

08001194 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80011a6:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <HAL_FLASHEx_Erase+0xd0>)
 80011a8:	7e1b      	ldrb	r3, [r3, #24]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d101      	bne.n	80011b2 <HAL_FLASHEx_Erase+0x1e>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e053      	b.n	800125a <HAL_FLASHEx_Erase+0xc6>
 80011b2:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <HAL_FLASHEx_Erase+0xd0>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d116      	bne.n	80011ee <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80011c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011c4:	f7ff ff50 	bl	8001068 <FLASH_WaitForLastOperation>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d141      	bne.n	8001252 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80011ce:	2001      	movs	r0, #1
 80011d0:	f000 f84c 	bl	800126c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011d8:	f7ff ff46 	bl	8001068 <FLASH_WaitForLastOperation>
 80011dc:	4603      	mov	r3, r0
 80011de:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <HAL_FLASHEx_Erase+0xd4>)
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	4a20      	ldr	r2, [pc, #128]	; (8001268 <HAL_FLASHEx_Erase+0xd4>)
 80011e6:	f023 0304 	bic.w	r3, r3, #4
 80011ea:	6113      	str	r3, [r2, #16]
 80011ec:	e031      	b.n	8001252 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80011ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011f2:	f7ff ff39 	bl	8001068 <FLASH_WaitForLastOperation>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d12a      	bne.n	8001252 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001202:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	e019      	b.n	8001240 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800120c:	68b8      	ldr	r0, [r7, #8]
 800120e:	f000 f849 	bl	80012a4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001212:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001216:	f7ff ff27 	bl	8001068 <FLASH_WaitForLastOperation>
 800121a:	4603      	mov	r3, r0
 800121c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_FLASHEx_Erase+0xd4>)
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	4a11      	ldr	r2, [pc, #68]	; (8001268 <HAL_FLASHEx_Erase+0xd4>)
 8001224:	f023 0302 	bic.w	r3, r3, #2
 8001228:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	601a      	str	r2, [r3, #0]
            break;
 8001236:	e00c      	b.n	8001252 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800123e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	029a      	lsls	r2, r3, #10
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	429a      	cmp	r2, r3
 8001250:	d3dc      	bcc.n	800120c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <HAL_FLASHEx_Erase+0xd0>)
 8001254:	2200      	movs	r2, #0
 8001256:	761a      	strb	r2, [r3, #24]

  return status;
 8001258:	7bfb      	ldrb	r3, [r7, #15]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000188 	.word	0x20000188
 8001268:	40022000 	.word	0x40022000

0800126c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <FLASH_MassErase+0x30>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <FLASH_MassErase+0x34>)
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <FLASH_MassErase+0x34>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <FLASH_MassErase+0x34>)
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <FLASH_MassErase+0x34>)
 800128c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001290:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	20000188 	.word	0x20000188
 80012a0:	40022000 	.word	0x40022000

080012a4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <FLASH_PageErase+0x38>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <FLASH_PageErase+0x3c>)
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <FLASH_PageErase+0x3c>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80012be:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <FLASH_PageErase+0x3c>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <FLASH_PageErase+0x3c>)
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <FLASH_PageErase+0x3c>)
 80012ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ce:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000188 	.word	0x20000188
 80012e0:	40022000 	.word	0x40022000

080012e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b08b      	sub	sp, #44	; 0x2c
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f6:	e127      	b.n	8001548 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012f8:	2201      	movs	r2, #1
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	69fa      	ldr	r2, [r7, #28]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	429a      	cmp	r2, r3
 8001312:	f040 8116 	bne.w	8001542 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b12      	cmp	r3, #18
 800131c:	d034      	beq.n	8001388 <HAL_GPIO_Init+0xa4>
 800131e:	2b12      	cmp	r3, #18
 8001320:	d80d      	bhi.n	800133e <HAL_GPIO_Init+0x5a>
 8001322:	2b02      	cmp	r3, #2
 8001324:	d02b      	beq.n	800137e <HAL_GPIO_Init+0x9a>
 8001326:	2b02      	cmp	r3, #2
 8001328:	d804      	bhi.n	8001334 <HAL_GPIO_Init+0x50>
 800132a:	2b00      	cmp	r3, #0
 800132c:	d031      	beq.n	8001392 <HAL_GPIO_Init+0xae>
 800132e:	2b01      	cmp	r3, #1
 8001330:	d01c      	beq.n	800136c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001332:	e048      	b.n	80013c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001334:	2b03      	cmp	r3, #3
 8001336:	d043      	beq.n	80013c0 <HAL_GPIO_Init+0xdc>
 8001338:	2b11      	cmp	r3, #17
 800133a:	d01b      	beq.n	8001374 <HAL_GPIO_Init+0x90>
          break;
 800133c:	e043      	b.n	80013c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800133e:	4a89      	ldr	r2, [pc, #548]	; (8001564 <HAL_GPIO_Init+0x280>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d026      	beq.n	8001392 <HAL_GPIO_Init+0xae>
 8001344:	4a87      	ldr	r2, [pc, #540]	; (8001564 <HAL_GPIO_Init+0x280>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d806      	bhi.n	8001358 <HAL_GPIO_Init+0x74>
 800134a:	4a87      	ldr	r2, [pc, #540]	; (8001568 <HAL_GPIO_Init+0x284>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d020      	beq.n	8001392 <HAL_GPIO_Init+0xae>
 8001350:	4a86      	ldr	r2, [pc, #536]	; (800156c <HAL_GPIO_Init+0x288>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d01d      	beq.n	8001392 <HAL_GPIO_Init+0xae>
          break;
 8001356:	e036      	b.n	80013c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001358:	4a85      	ldr	r2, [pc, #532]	; (8001570 <HAL_GPIO_Init+0x28c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d019      	beq.n	8001392 <HAL_GPIO_Init+0xae>
 800135e:	4a85      	ldr	r2, [pc, #532]	; (8001574 <HAL_GPIO_Init+0x290>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d016      	beq.n	8001392 <HAL_GPIO_Init+0xae>
 8001364:	4a84      	ldr	r2, [pc, #528]	; (8001578 <HAL_GPIO_Init+0x294>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d013      	beq.n	8001392 <HAL_GPIO_Init+0xae>
          break;
 800136a:	e02c      	b.n	80013c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	623b      	str	r3, [r7, #32]
          break;
 8001372:	e028      	b.n	80013c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	3304      	adds	r3, #4
 800137a:	623b      	str	r3, [r7, #32]
          break;
 800137c:	e023      	b.n	80013c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	3308      	adds	r3, #8
 8001384:	623b      	str	r3, [r7, #32]
          break;
 8001386:	e01e      	b.n	80013c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	330c      	adds	r3, #12
 800138e:	623b      	str	r3, [r7, #32]
          break;
 8001390:	e019      	b.n	80013c6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d102      	bne.n	80013a0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800139a:	2304      	movs	r3, #4
 800139c:	623b      	str	r3, [r7, #32]
          break;
 800139e:	e012      	b.n	80013c6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d105      	bne.n	80013b4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a8:	2308      	movs	r3, #8
 80013aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69fa      	ldr	r2, [r7, #28]
 80013b0:	611a      	str	r2, [r3, #16]
          break;
 80013b2:	e008      	b.n	80013c6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013b4:	2308      	movs	r3, #8
 80013b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69fa      	ldr	r2, [r7, #28]
 80013bc:	615a      	str	r2, [r3, #20]
          break;
 80013be:	e002      	b.n	80013c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
          break;
 80013c4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	2bff      	cmp	r3, #255	; 0xff
 80013ca:	d801      	bhi.n	80013d0 <HAL_GPIO_Init+0xec>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	e001      	b.n	80013d4 <HAL_GPIO_Init+0xf0>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3304      	adds	r3, #4
 80013d4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	2bff      	cmp	r3, #255	; 0xff
 80013da:	d802      	bhi.n	80013e2 <HAL_GPIO_Init+0xfe>
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	e002      	b.n	80013e8 <HAL_GPIO_Init+0x104>
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	3b08      	subs	r3, #8
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	210f      	movs	r1, #15
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	401a      	ands	r2, r3
 80013fa:	6a39      	ldr	r1, [r7, #32]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	431a      	orrs	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 8096 	beq.w	8001542 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001416:	4b59      	ldr	r3, [pc, #356]	; (800157c <HAL_GPIO_Init+0x298>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	4a58      	ldr	r2, [pc, #352]	; (800157c <HAL_GPIO_Init+0x298>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6193      	str	r3, [r2, #24]
 8001422:	4b56      	ldr	r3, [pc, #344]	; (800157c <HAL_GPIO_Init+0x298>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800142e:	4a54      	ldr	r2, [pc, #336]	; (8001580 <HAL_GPIO_Init+0x29c>)
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	3302      	adds	r3, #2
 8001436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	220f      	movs	r2, #15
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	4013      	ands	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4b      	ldr	r2, [pc, #300]	; (8001584 <HAL_GPIO_Init+0x2a0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d013      	beq.n	8001482 <HAL_GPIO_Init+0x19e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4a      	ldr	r2, [pc, #296]	; (8001588 <HAL_GPIO_Init+0x2a4>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d00d      	beq.n	800147e <HAL_GPIO_Init+0x19a>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a49      	ldr	r2, [pc, #292]	; (800158c <HAL_GPIO_Init+0x2a8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d007      	beq.n	800147a <HAL_GPIO_Init+0x196>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a48      	ldr	r2, [pc, #288]	; (8001590 <HAL_GPIO_Init+0x2ac>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d101      	bne.n	8001476 <HAL_GPIO_Init+0x192>
 8001472:	2303      	movs	r3, #3
 8001474:	e006      	b.n	8001484 <HAL_GPIO_Init+0x1a0>
 8001476:	2304      	movs	r3, #4
 8001478:	e004      	b.n	8001484 <HAL_GPIO_Init+0x1a0>
 800147a:	2302      	movs	r3, #2
 800147c:	e002      	b.n	8001484 <HAL_GPIO_Init+0x1a0>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <HAL_GPIO_Init+0x1a0>
 8001482:	2300      	movs	r3, #0
 8001484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001486:	f002 0203 	and.w	r2, r2, #3
 800148a:	0092      	lsls	r2, r2, #2
 800148c:	4093      	lsls	r3, r2
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	4313      	orrs	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001494:	493a      	ldr	r1, [pc, #232]	; (8001580 <HAL_GPIO_Init+0x29c>)
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	089b      	lsrs	r3, r3, #2
 800149a:	3302      	adds	r3, #2
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d006      	beq.n	80014bc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014ae:	4b39      	ldr	r3, [pc, #228]	; (8001594 <HAL_GPIO_Init+0x2b0>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4938      	ldr	r1, [pc, #224]	; (8001594 <HAL_GPIO_Init+0x2b0>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]
 80014ba:	e006      	b.n	80014ca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014bc:	4b35      	ldr	r3, [pc, #212]	; (8001594 <HAL_GPIO_Init+0x2b0>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	4933      	ldr	r1, [pc, #204]	; (8001594 <HAL_GPIO_Init+0x2b0>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d006      	beq.n	80014e4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014d6:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <HAL_GPIO_Init+0x2b0>)
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	492e      	ldr	r1, [pc, #184]	; (8001594 <HAL_GPIO_Init+0x2b0>)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	604b      	str	r3, [r1, #4]
 80014e2:	e006      	b.n	80014f2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014e4:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <HAL_GPIO_Init+0x2b0>)
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	4929      	ldr	r1, [pc, #164]	; (8001594 <HAL_GPIO_Init+0x2b0>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d006      	beq.n	800150c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014fe:	4b25      	ldr	r3, [pc, #148]	; (8001594 <HAL_GPIO_Init+0x2b0>)
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	4924      	ldr	r1, [pc, #144]	; (8001594 <HAL_GPIO_Init+0x2b0>)
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	608b      	str	r3, [r1, #8]
 800150a:	e006      	b.n	800151a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800150c:	4b21      	ldr	r3, [pc, #132]	; (8001594 <HAL_GPIO_Init+0x2b0>)
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	43db      	mvns	r3, r3
 8001514:	491f      	ldr	r1, [pc, #124]	; (8001594 <HAL_GPIO_Init+0x2b0>)
 8001516:	4013      	ands	r3, r2
 8001518:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d006      	beq.n	8001534 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <HAL_GPIO_Init+0x2b0>)
 8001528:	68da      	ldr	r2, [r3, #12]
 800152a:	491a      	ldr	r1, [pc, #104]	; (8001594 <HAL_GPIO_Init+0x2b0>)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	60cb      	str	r3, [r1, #12]
 8001532:	e006      	b.n	8001542 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001534:	4b17      	ldr	r3, [pc, #92]	; (8001594 <HAL_GPIO_Init+0x2b0>)
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	43db      	mvns	r3, r3
 800153c:	4915      	ldr	r1, [pc, #84]	; (8001594 <HAL_GPIO_Init+0x2b0>)
 800153e:	4013      	ands	r3, r2
 8001540:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	3301      	adds	r3, #1
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	fa22 f303 	lsr.w	r3, r2, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	f47f aed0 	bne.w	80012f8 <HAL_GPIO_Init+0x14>
  }
}
 8001558:	bf00      	nop
 800155a:	372c      	adds	r7, #44	; 0x2c
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	10210000 	.word	0x10210000
 8001568:	10110000 	.word	0x10110000
 800156c:	10120000 	.word	0x10120000
 8001570:	10310000 	.word	0x10310000
 8001574:	10320000 	.word	0x10320000
 8001578:	10220000 	.word	0x10220000
 800157c:	40021000 	.word	0x40021000
 8001580:	40010000 	.word	0x40010000
 8001584:	40010800 	.word	0x40010800
 8001588:	40010c00 	.word	0x40010c00
 800158c:	40011000 	.word	0x40011000
 8001590:	40011400 	.word	0x40011400
 8001594:	40010400 	.word	0x40010400

08001598 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e26c      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8087 	beq.w	80016c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015b8:	4b92      	ldr	r3, [pc, #584]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d00c      	beq.n	80015de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015c4:	4b8f      	ldr	r3, [pc, #572]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d112      	bne.n	80015f6 <HAL_RCC_OscConfig+0x5e>
 80015d0:	4b8c      	ldr	r3, [pc, #560]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015dc:	d10b      	bne.n	80015f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015de:	4b89      	ldr	r3, [pc, #548]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d06c      	beq.n	80016c4 <HAL_RCC_OscConfig+0x12c>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d168      	bne.n	80016c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e246      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fe:	d106      	bne.n	800160e <HAL_RCC_OscConfig+0x76>
 8001600:	4b80      	ldr	r3, [pc, #512]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a7f      	ldr	r2, [pc, #508]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	e02e      	b.n	800166c <HAL_RCC_OscConfig+0xd4>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10c      	bne.n	8001630 <HAL_RCC_OscConfig+0x98>
 8001616:	4b7b      	ldr	r3, [pc, #492]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a7a      	ldr	r2, [pc, #488]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800161c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	4b78      	ldr	r3, [pc, #480]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a77      	ldr	r2, [pc, #476]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e01d      	b.n	800166c <HAL_RCC_OscConfig+0xd4>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001638:	d10c      	bne.n	8001654 <HAL_RCC_OscConfig+0xbc>
 800163a:	4b72      	ldr	r3, [pc, #456]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a71      	ldr	r2, [pc, #452]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b6f      	ldr	r3, [pc, #444]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a6e      	ldr	r2, [pc, #440]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800164c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e00b      	b.n	800166c <HAL_RCC_OscConfig+0xd4>
 8001654:	4b6b      	ldr	r3, [pc, #428]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a6a      	ldr	r2, [pc, #424]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800165a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	4b68      	ldr	r3, [pc, #416]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a67      	ldr	r2, [pc, #412]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800166a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d013      	beq.n	800169c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fb02 	bl	8000c7c <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff fafe 	bl	8000c7c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	; 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e1fa      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0xe4>
 800169a:	e014      	b.n	80016c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff faee 	bl	8000c7c <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a4:	f7ff faea 	bl	8000c7c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	; 0x64
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e1e6      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b6:	4b53      	ldr	r3, [pc, #332]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x10c>
 80016c2:	e000      	b.n	80016c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d063      	beq.n	800179a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016d2:	4b4c      	ldr	r3, [pc, #304]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00b      	beq.n	80016f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016de:	4b49      	ldr	r3, [pc, #292]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d11c      	bne.n	8001724 <HAL_RCC_OscConfig+0x18c>
 80016ea:	4b46      	ldr	r3, [pc, #280]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d116      	bne.n	8001724 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f6:	4b43      	ldr	r3, [pc, #268]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <HAL_RCC_OscConfig+0x176>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d001      	beq.n	800170e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e1ba      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170e:	4b3d      	ldr	r3, [pc, #244]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4939      	ldr	r1, [pc, #228]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800171e:	4313      	orrs	r3, r2
 8001720:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001722:	e03a      	b.n	800179a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d020      	beq.n	800176e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800172c:	4b36      	ldr	r3, [pc, #216]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001732:	f7ff faa3 	bl	8000c7c <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173a:	f7ff fa9f 	bl	8000c7c <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e19b      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174c:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001758:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4927      	ldr	r1, [pc, #156]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001768:	4313      	orrs	r3, r2
 800176a:	600b      	str	r3, [r1, #0]
 800176c:	e015      	b.n	800179a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fa82 	bl	8000c7c <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177c:	f7ff fa7e 	bl	8000c7c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e17a      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d03a      	beq.n	800181c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d019      	beq.n	80017e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b4:	f7ff fa62 	bl	8000c7c <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017bc:	f7ff fa5e 	bl	8000c7c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e15a      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017da:	2001      	movs	r0, #1
 80017dc:	f000 fada 	bl	8001d94 <RCC_Delay>
 80017e0:	e01c      	b.n	800181c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e8:	f7ff fa48 	bl	8000c7c <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ee:	e00f      	b.n	8001810 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f0:	f7ff fa44 	bl	8000c7c <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d908      	bls.n	8001810 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e140      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	42420000 	.word	0x42420000
 800180c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001810:	4b9e      	ldr	r3, [pc, #632]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1e9      	bne.n	80017f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 80a6 	beq.w	8001976 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182e:	4b97      	ldr	r3, [pc, #604]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10d      	bne.n	8001856 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4b94      	ldr	r3, [pc, #592]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	4a93      	ldr	r2, [pc, #588]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	61d3      	str	r3, [r2, #28]
 8001846:	4b91      	ldr	r3, [pc, #580]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001852:	2301      	movs	r3, #1
 8001854:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001856:	4b8e      	ldr	r3, [pc, #568]	; (8001a90 <HAL_RCC_OscConfig+0x4f8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d118      	bne.n	8001894 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001862:	4b8b      	ldr	r3, [pc, #556]	; (8001a90 <HAL_RCC_OscConfig+0x4f8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a8a      	ldr	r2, [pc, #552]	; (8001a90 <HAL_RCC_OscConfig+0x4f8>)
 8001868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186e:	f7ff fa05 	bl	8000c7c <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001876:	f7ff fa01 	bl	8000c7c <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b64      	cmp	r3, #100	; 0x64
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e0fd      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	4b81      	ldr	r3, [pc, #516]	; (8001a90 <HAL_RCC_OscConfig+0x4f8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x312>
 800189c:	4b7b      	ldr	r3, [pc, #492]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4a7a      	ldr	r2, [pc, #488]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6213      	str	r3, [r2, #32]
 80018a8:	e02d      	b.n	8001906 <HAL_RCC_OscConfig+0x36e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0x334>
 80018b2:	4b76      	ldr	r3, [pc, #472]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	4a75      	ldr	r2, [pc, #468]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	6213      	str	r3, [r2, #32]
 80018be:	4b73      	ldr	r3, [pc, #460]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	4a72      	ldr	r2, [pc, #456]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018c4:	f023 0304 	bic.w	r3, r3, #4
 80018c8:	6213      	str	r3, [r2, #32]
 80018ca:	e01c      	b.n	8001906 <HAL_RCC_OscConfig+0x36e>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	d10c      	bne.n	80018ee <HAL_RCC_OscConfig+0x356>
 80018d4:	4b6d      	ldr	r3, [pc, #436]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	4a6c      	ldr	r2, [pc, #432]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	6213      	str	r3, [r2, #32]
 80018e0:	4b6a      	ldr	r3, [pc, #424]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	4a69      	ldr	r2, [pc, #420]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6213      	str	r3, [r2, #32]
 80018ec:	e00b      	b.n	8001906 <HAL_RCC_OscConfig+0x36e>
 80018ee:	4b67      	ldr	r3, [pc, #412]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	4a66      	ldr	r2, [pc, #408]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	6213      	str	r3, [r2, #32]
 80018fa:	4b64      	ldr	r3, [pc, #400]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4a63      	ldr	r2, [pc, #396]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 8001900:	f023 0304 	bic.w	r3, r3, #4
 8001904:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d015      	beq.n	800193a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190e:	f7ff f9b5 	bl	8000c7c <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001914:	e00a      	b.n	800192c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7ff f9b1 	bl	8000c7c <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f241 3288 	movw	r2, #5000	; 0x1388
 8001924:	4293      	cmp	r3, r2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e0ab      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192c:	4b57      	ldr	r3, [pc, #348]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0ee      	beq.n	8001916 <HAL_RCC_OscConfig+0x37e>
 8001938:	e014      	b.n	8001964 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193a:	f7ff f99f 	bl	8000c7c <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001940:	e00a      	b.n	8001958 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001942:	f7ff f99b 	bl	8000c7c <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001950:	4293      	cmp	r3, r2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e095      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001958:	4b4c      	ldr	r3, [pc, #304]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1ee      	bne.n	8001942 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001964:	7dfb      	ldrb	r3, [r7, #23]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d105      	bne.n	8001976 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800196a:	4b48      	ldr	r3, [pc, #288]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	4a47      	ldr	r2, [pc, #284]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 8001970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001974:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 8081 	beq.w	8001a82 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001980:	4b42      	ldr	r3, [pc, #264]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b08      	cmp	r3, #8
 800198a:	d061      	beq.n	8001a50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d146      	bne.n	8001a22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001994:	4b3f      	ldr	r3, [pc, #252]	; (8001a94 <HAL_RCC_OscConfig+0x4fc>)
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff f96f 	bl	8000c7c <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a2:	f7ff f96b 	bl	8000c7c <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e067      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b4:	4b35      	ldr	r3, [pc, #212]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f0      	bne.n	80019a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c8:	d108      	bne.n	80019dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ca:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	492d      	ldr	r1, [pc, #180]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019dc:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a19      	ldr	r1, [r3, #32]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	430b      	orrs	r3, r1
 80019ee:	4927      	ldr	r1, [pc, #156]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f4:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <HAL_RCC_OscConfig+0x4fc>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff f93f 	bl	8000c7c <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a02:	f7ff f93b 	bl	8000c7c <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e037      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a14:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x46a>
 8001a20:	e02f      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <HAL_RCC_OscConfig+0x4fc>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7ff f928 	bl	8000c7c <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a30:	f7ff f924 	bl	8000c7c <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e020      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x498>
 8001a4e:	e018      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e013      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d001      	beq.n	8001a82 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40007000 	.word	0x40007000
 8001a94:	42420060 	.word	0x42420060

08001a98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0d0      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aac:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d910      	bls.n	8001adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aba:	4b67      	ldr	r3, [pc, #412]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 0207 	bic.w	r2, r3, #7
 8001ac2:	4965      	ldr	r1, [pc, #404]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b63      	ldr	r3, [pc, #396]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0b8      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d020      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af4:	4b59      	ldr	r3, [pc, #356]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	4a58      	ldr	r2, [pc, #352]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001afe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b0c:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	4a52      	ldr	r2, [pc, #328]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b18:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	494d      	ldr	r1, [pc, #308]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d040      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d115      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e07f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b56:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d109      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e073      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b66:	4b3d      	ldr	r3, [pc, #244]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e06b      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b76:	4b39      	ldr	r3, [pc, #228]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f023 0203 	bic.w	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4936      	ldr	r1, [pc, #216]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b88:	f7ff f878 	bl	8000c7c <HAL_GetTick>
 8001b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b90:	f7ff f874 	bl	8000c7c <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e053      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba6:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 020c 	and.w	r2, r3, #12
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d1eb      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d210      	bcs.n	8001be8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 0207 	bic.w	r2, r3, #7
 8001bce:	4922      	ldr	r1, [pc, #136]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e032      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4916      	ldr	r1, [pc, #88]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d009      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	490e      	ldr	r1, [pc, #56]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c26:	f000 f821 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001c2a:	4601      	mov	r1, r0
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001c38:	5cd3      	ldrb	r3, [r2, r3]
 8001c3a:	fa21 f303 	lsr.w	r3, r1, r3
 8001c3e:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <HAL_RCC_ClockConfig+0x1cc>)
 8001c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_ClockConfig+0x1d0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe ffd6 	bl	8000bf8 <HAL_InitTick>

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40022000 	.word	0x40022000
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	08002314 	.word	0x08002314
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000004 	.word	0x20000004

08001c6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c6c:	b490      	push	{r4, r7}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c72:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c74:	1d3c      	adds	r4, r7, #4
 8001c76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c7c:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c96:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d002      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0x40>
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d003      	beq.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x46>
 8001caa:	e02d      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cac:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cae:	623b      	str	r3, [r7, #32]
      break;
 8001cb0:	e02d      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	0c9b      	lsrs	r3, r3, #18
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cc4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d013      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	0c5b      	lsrs	r3, r3, #17
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cde:	4413      	add	r3, r2
 8001ce0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ce4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	4a0f      	ldr	r2, [pc, #60]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cea:	fb02 f203 	mul.w	r2, r2, r3
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf6:	e004      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	4a0c      	ldr	r2, [pc, #48]	; (8001d2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cfc:	fb02 f303 	mul.w	r3, r2, r3
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	623b      	str	r3, [r7, #32]
      break;
 8001d06:	e002      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d08:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d0a:	623b      	str	r3, [r7, #32]
      break;
 8001d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3728      	adds	r7, #40	; 0x28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc90      	pop	{r4, r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	08002300 	.word	0x08002300
 8001d20:	08002310 	.word	0x08002310
 8001d24:	40021000 	.word	0x40021000
 8001d28:	007a1200 	.word	0x007a1200
 8001d2c:	003d0900 	.word	0x003d0900

08001d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d34:	4b02      	ldr	r3, [pc, #8]	; (8001d40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	20000000 	.word	0x20000000

08001d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d48:	f7ff fff2 	bl	8001d30 <HAL_RCC_GetHCLKFreq>
 8001d4c:	4601      	mov	r1, r0
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	0a1b      	lsrs	r3, r3, #8
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	4a03      	ldr	r2, [pc, #12]	; (8001d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d5a:	5cd3      	ldrb	r3, [r2, r3]
 8001d5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000
 8001d68:	08002324 	.word	0x08002324

08001d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d70:	f7ff ffde 	bl	8001d30 <HAL_RCC_GetHCLKFreq>
 8001d74:	4601      	mov	r1, r0
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	0adb      	lsrs	r3, r3, #11
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	4a03      	ldr	r2, [pc, #12]	; (8001d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d82:	5cd3      	ldrb	r3, [r2, r3]
 8001d84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	08002324 	.word	0x08002324

08001d94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <RCC_Delay+0x34>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <RCC_Delay+0x38>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	0a5b      	lsrs	r3, r3, #9
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	fb02 f303 	mul.w	r3, r2, r3
 8001dae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001db0:	bf00      	nop
  }
  while (Delay --);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1e5a      	subs	r2, r3, #1
 8001db6:	60fa      	str	r2, [r7, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f9      	bne.n	8001db0 <RCC_Delay+0x1c>
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	10624dd3 	.word	0x10624dd3

08001dd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e03f      	b.n	8001e62 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d106      	bne.n	8001dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7fe fe3c 	bl	8000a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2224      	movs	r2, #36	; 0x24
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f9a7 	bl	8002168 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695a      	ldr	r2, [r3, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b08a      	sub	sp, #40	; 0x28
 8001e6e:	af02      	add	r7, sp, #8
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	4613      	mov	r3, r2
 8001e78:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	d17c      	bne.n	8001f84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <HAL_UART_Transmit+0x2c>
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e075      	b.n	8001f86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_UART_Transmit+0x3e>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e06e      	b.n	8001f86 <HAL_UART_Transmit+0x11c>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2221      	movs	r2, #33	; 0x21
 8001eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ebe:	f7fe fedd 	bl	8000c7c <HAL_GetTick>
 8001ec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	88fa      	ldrh	r2, [r7, #6]
 8001ec8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	88fa      	ldrh	r2, [r7, #6]
 8001ece:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ed8:	d108      	bne.n	8001eec <HAL_UART_Transmit+0x82>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d104      	bne.n	8001eec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	e003      	b.n	8001ef4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001efc:	e02a      	b.n	8001f54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2200      	movs	r2, #0
 8001f06:	2180      	movs	r1, #128	; 0x80
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 f8e2 	bl	80020d2 <UART_WaitOnFlagUntilTimeout>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e036      	b.n	8001f86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10b      	bne.n	8001f36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	3302      	adds	r3, #2
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	e007      	b.n	8001f46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	781a      	ldrb	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	3301      	adds	r3, #1
 8001f44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1cf      	bne.n	8001efe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2200      	movs	r2, #0
 8001f66:	2140      	movs	r1, #64	; 0x40
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 f8b2 	bl	80020d2 <UART_WaitOnFlagUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e006      	b.n	8001f86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	e000      	b.n	8001f86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f84:	2302      	movs	r3, #2
  }
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3720      	adds	r7, #32
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b08a      	sub	sp, #40	; 0x28
 8001f92:	af02      	add	r7, sp, #8
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	f040 808c 	bne.w	80020c8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <HAL_UART_Receive+0x2e>
 8001fb6:	88fb      	ldrh	r3, [r7, #6]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e084      	b.n	80020ca <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_UART_Receive+0x40>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e07d      	b.n	80020ca <HAL_UART_Receive+0x13c>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2222      	movs	r2, #34	; 0x22
 8001fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fea:	f7fe fe47 	bl	8000c7c <HAL_GetTick>
 8001fee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	88fa      	ldrh	r2, [r7, #6]
 8001ff4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	88fa      	ldrh	r2, [r7, #6]
 8001ffa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002004:	d108      	bne.n	8002018 <HAL_UART_Receive+0x8a>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d104      	bne.n	8002018 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	e003      	b.n	8002020 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002028:	e043      	b.n	80020b2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2200      	movs	r2, #0
 8002032:	2120      	movs	r1, #32
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 f84c 	bl	80020d2 <UART_WaitOnFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e042      	b.n	80020ca <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10c      	bne.n	8002064 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	b29b      	uxth	r3, r3
 8002052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002056:	b29a      	uxth	r2, r3
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	3302      	adds	r3, #2
 8002060:	61bb      	str	r3, [r7, #24]
 8002062:	e01f      	b.n	80020a4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800206c:	d007      	beq.n	800207e <HAL_UART_Receive+0xf0>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10a      	bne.n	800208c <HAL_UART_Receive+0xfe>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d106      	bne.n	800208c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	e008      	b.n	800209e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002098:	b2da      	uxtb	r2, r3
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3301      	adds	r3, #1
 80020a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1b6      	bne.n	800202a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	e000      	b.n	80020ca <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80020c8:	2302      	movs	r3, #2
  }
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3720      	adds	r7, #32
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b084      	sub	sp, #16
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	4613      	mov	r3, r2
 80020e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020e2:	e02c      	b.n	800213e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ea:	d028      	beq.n	800213e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d007      	beq.n	8002102 <UART_WaitOnFlagUntilTimeout+0x30>
 80020f2:	f7fe fdc3 	bl	8000c7c <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d21d      	bcs.n	800213e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002110:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0201 	bic.w	r2, r2, #1
 8002120:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2220      	movs	r2, #32
 8002126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2220      	movs	r2, #32
 800212e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e00f      	b.n	800215e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	4013      	ands	r3, r2
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	429a      	cmp	r2, r3
 800214c:	bf0c      	ite	eq
 800214e:	2301      	moveq	r3, #1
 8002150:	2300      	movne	r3, #0
 8002152:	b2db      	uxtb	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	429a      	cmp	r2, r3
 800215a:	d0c3      	beq.n	80020e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	4313      	orrs	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80021a2:	f023 030c 	bic.w	r3, r3, #12
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	430b      	orrs	r3, r1
 80021ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a2c      	ldr	r2, [pc, #176]	; (800227c <UART_SetConfig+0x114>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d103      	bne.n	80021d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021d0:	f7ff fdcc 	bl	8001d6c <HAL_RCC_GetPCLK2Freq>
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	e002      	b.n	80021de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80021d8:	f7ff fdb4 	bl	8001d44 <HAL_RCC_GetPCLK1Freq>
 80021dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	009a      	lsls	r2, r3, #2
 80021e8:	441a      	add	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	4a22      	ldr	r2, [pc, #136]	; (8002280 <UART_SetConfig+0x118>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	0119      	lsls	r1, r3, #4
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	009a      	lsls	r2, r3, #2
 8002208:	441a      	add	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	fbb2 f2f3 	udiv	r2, r2, r3
 8002214:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <UART_SetConfig+0x118>)
 8002216:	fba3 0302 	umull	r0, r3, r3, r2
 800221a:	095b      	lsrs	r3, r3, #5
 800221c:	2064      	movs	r0, #100	; 0x64
 800221e:	fb00 f303 	mul.w	r3, r0, r3
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	3332      	adds	r3, #50	; 0x32
 8002228:	4a15      	ldr	r2, [pc, #84]	; (8002280 <UART_SetConfig+0x118>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002234:	4419      	add	r1, r3
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	009a      	lsls	r2, r3, #2
 8002240:	441a      	add	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	fbb2 f2f3 	udiv	r2, r2, r3
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <UART_SetConfig+0x118>)
 800224e:	fba3 0302 	umull	r0, r3, r3, r2
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	2064      	movs	r0, #100	; 0x64
 8002256:	fb00 f303 	mul.w	r3, r0, r3
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	3332      	adds	r3, #50	; 0x32
 8002260:	4a07      	ldr	r2, [pc, #28]	; (8002280 <UART_SetConfig+0x118>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	f003 020f 	and.w	r2, r3, #15
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	440a      	add	r2, r1
 8002272:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002274:	bf00      	nop
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40013800 	.word	0x40013800
 8002280:	51eb851f 	.word	0x51eb851f

08002284 <__libc_init_array>:
 8002284:	b570      	push	{r4, r5, r6, lr}
 8002286:	2500      	movs	r5, #0
 8002288:	4e0c      	ldr	r6, [pc, #48]	; (80022bc <__libc_init_array+0x38>)
 800228a:	4c0d      	ldr	r4, [pc, #52]	; (80022c0 <__libc_init_array+0x3c>)
 800228c:	1ba4      	subs	r4, r4, r6
 800228e:	10a4      	asrs	r4, r4, #2
 8002290:	42a5      	cmp	r5, r4
 8002292:	d109      	bne.n	80022a8 <__libc_init_array+0x24>
 8002294:	f000 f822 	bl	80022dc <_init>
 8002298:	2500      	movs	r5, #0
 800229a:	4e0a      	ldr	r6, [pc, #40]	; (80022c4 <__libc_init_array+0x40>)
 800229c:	4c0a      	ldr	r4, [pc, #40]	; (80022c8 <__libc_init_array+0x44>)
 800229e:	1ba4      	subs	r4, r4, r6
 80022a0:	10a4      	asrs	r4, r4, #2
 80022a2:	42a5      	cmp	r5, r4
 80022a4:	d105      	bne.n	80022b2 <__libc_init_array+0x2e>
 80022a6:	bd70      	pop	{r4, r5, r6, pc}
 80022a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022ac:	4798      	blx	r3
 80022ae:	3501      	adds	r5, #1
 80022b0:	e7ee      	b.n	8002290 <__libc_init_array+0xc>
 80022b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022b6:	4798      	blx	r3
 80022b8:	3501      	adds	r5, #1
 80022ba:	e7f2      	b.n	80022a2 <__libc_init_array+0x1e>
 80022bc:	0800232c 	.word	0x0800232c
 80022c0:	0800232c 	.word	0x0800232c
 80022c4:	0800232c 	.word	0x0800232c
 80022c8:	08002330 	.word	0x08002330

080022cc <memset>:
 80022cc:	4603      	mov	r3, r0
 80022ce:	4402      	add	r2, r0
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d100      	bne.n	80022d6 <memset+0xa>
 80022d4:	4770      	bx	lr
 80022d6:	f803 1b01 	strb.w	r1, [r3], #1
 80022da:	e7f9      	b.n	80022d0 <memset+0x4>

080022dc <_init>:
 80022dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022de:	bf00      	nop
 80022e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022e2:	bc08      	pop	{r3}
 80022e4:	469e      	mov	lr, r3
 80022e6:	4770      	bx	lr

080022e8 <_fini>:
 80022e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ea:	bf00      	nop
 80022ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ee:	bc08      	pop	{r3}
 80022f0:	469e      	mov	lr, r3
 80022f2:	4770      	bx	lr
